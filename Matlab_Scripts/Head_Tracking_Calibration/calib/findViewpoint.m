function v = findViewpoint(h, o)
h1 = h(1); h2 = h(2); h3 = h(3);
d1 = o(1); d2 = o(2); d3 = o(3);
o1 = o(1); o2 = o(2); o3 = o(3);

theta1 = -2*atan((h3 - (h1^2 + h3^2 - o1^2)^(1/2))/(h1 + o1));
theta2 = -2*atan((h3 + (h1^2 + h3^2 - o1^2)^(1/2))/(h1 + o1));

a1 = theta1;
phi11 = -2*atan((h2 - (h1^2*sin(a1)^2 + h3^2*sin(a1)^2 + h2^2 + 2*h1*h3*sin(a1)^2)^(1/2))/(h1*sin(a1) + h3*sin(a1)));
phi12 = -2*atan((h2 + (h1^2*sin(a1)^2 + h3^2*sin(a1)^2 + h2^2 + 2*h1*h3*sin(a1)^2)^(1/2))/(h1*sin(a1) + h3*sin(a1)));

a1 = theta2;
phi21 = -2*atan((h2 + (h1^2*sin(a1)^2 + h3^2*sin(a1)^2 + h2^2 - o3^2 + 2*h1*h3*sin(a1)^2)^(1/2))/(o3 + h1*sin(a1) + h3*sin(a1)));
phi22 = -2*atan((h2 - (h1^2*sin(a1)^2 + h3^2*sin(a1)^2 + h2^2 - o3^2 + 2*h1*h3*sin(a1)^2)^(1/2))/(o3 + h1*sin(a1) + h3*sin(a1)));


a = [theta2; phi22];
R = [cos(a(1)) sin(a(2))*sin(a(1)) cos(a(2))*sin(a(1))
     0          cos(a(2))            -sin(a(2))
     -sin(a(1)) sin(a(2))*cos(a(1)) cos(a(2))*sin(a(1))];
g = h - R*o;

x = g(1);
y = g(2);
z = g(3);

v1 = [(h1*(d1^4 + 2*d1^2*d2^2 + d1^2*d3^2 - 2*d1^2*h1^2 - d1^2*h2^2 - 2*d1^2*h3^2 + d2^4 + d2^2*d3^2 - 2*d2^2*h1^2 - d2^2*h2^2 - 2*d2^2*h3^2 - d3^2*h1^2 - d3^2*h3^2 + h1^4 + h1^2*h2^2 + 2*h1^2*h3^2 + h2^2*h3^2 + h3^4))/((h1^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) - (h1*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))*(d3*d1^2 + d3*d2^2 - d3*h1^2 - d3*h3^2))/((h1^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) - (((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))*(d1*h1^2*h3 - d1*d2^2*h3 - d1^3*h3 + d1*h2^2*h3 + d1*h3^3 + d3*d2*h1*h2))/((h1^2 + h3^2)*(h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) + (d2*h1*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))*((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))))/((h1^2 + h3^2)*(h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2))
      x];
v2 = [(d3*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))/(h1^2 - d2^2 - d1^2 + h2^2 + h3^2) - (h2*(d1^2 + d2^2 + d3^2 - h1^2 - h2^2 - h3^2))/(h1^2 - d2^2 - d1^2 + h2^2 + h3^2) - (d2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))*((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))))/((h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) + (d2*d3*((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))))/((h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2))
      y];
v3 = [(h3*(d1^4 + 2*d1^2*d2^2 + d1^2*d3^2 - 2*d1^2*h1^2 - d1^2*h2^2 - 2*d1^2*h3^2 + d2^4 + d2^2*d3^2 - 2*d2^2*h1^2 - d2^2*h2^2 - 2*d2^2*h3^2 - d3^2*h1^2 - d3^2*h3^2 + h1^4 + h1^2*h2^2 + 2*h1^2*h3^2 + h2^2*h3^2 + h3^4))/((h1^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) - (h3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))*(d3*d1^2 + d3*d2^2 - d3*h1^2 - d3*h3^2))/((h1^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) + (((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))*(d1*h1^3 - d1*d2^2*h1 - d1^3*h1 + d1*h1*h2^2 + d1*h1*h3^2 - d3*d2*h2*h3))/((h1^2 + h3^2)*(h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2)) + (d2*h2*h3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))*((h1^6 - d1^6 + h3^6 - d1^2*d2^4 - 2*d1^4*d2^2 - d1^4*d3^2 - 3*d1^2*h1^4 + 3*d1^4*h1^2 - d1^2*h2^4 - 2*d2^2*h1^4 + 2*d1^4*h2^2 + d2^4*h1^2 - 3*d1^2*h3^4 - d2^2*h2^4 + 3*d1^4*h3^2 - d3^2*h1^4 + d2^4*h2^2 - 2*d2^2*h3^4 + d2^4*h3^2 - d3^2*h3^4 + h1^2*h2^4 + 2*h1^4*h2^2 + 3*h1^2*h3^4 + 3*h1^4*h3^2 + 2*h2^2*h3^4 + h2^4*h3^2 + d2^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))^2 + 2*d1^4*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h3^4*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - d1^2*d2^2*d3^2 + 4*d1^2*d2^2*h1^2 + 3*d1^2*d2^2*h2^2 + 2*d1^2*d3^2*h1^2 + 4*d1^2*d2^2*h3^2 + d1^2*d3^2*h2^2 + d2^2*d3^2*h1^2 + 2*d1^2*d3^2*h3^2 + d2^2*d3^2*h2^2 + d2^2*d3^2*h3^2 - 4*d1^2*h1^2*h2^2 - 6*d1^2*h1^2*h3^2 - 3*d2^2*h1^2*h2^2 - 4*d1^2*h2^2*h3^2 - 4*d2^2*h1^2*h3^2 - d3^2*h1^2*h2^2 - 3*d2^2*h2^2*h3^2 - 2*d3^2*h1^2*h3^2 - d3^2*h2^2*h3^2 + 4*h1^2*h2^2*h3^2 + 2*d1^2*d2^2*d3*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d1^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h1^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 4*d1^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) - 2*d2^2*d3*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h1^2*h2^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 4*d3*h1^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)) + 2*d3*h2^2*h3^2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2)))^(1/2) + d2*h2*(d3 + (h1^2 - d2^2 - d1^2 + h2^2 + h3^2)^(1/2))))/((h1^2 + h3^2)*(h1^2 - d1^2 + h2^2 + h3^2)*(h1^2 - d2^2 - d1^2 + h2^2 + h3^2))
      z];
v = [v1 v2 v3];
end